package com.orbious.util;

import com.orbious.util.Bytes;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import org.junit.Test;

public class BytesTest {

	@Test
	public void type() throws Exception {
		assertThat(Bytes.class, notNullValue());
	}

//	@Test
//	public void convert_A$Class$byteArray() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Class<?> clazz = null;
//		byte[] b = new byte[] {};
//		Object actual = Bytes.convert(clazz, b);
//		Object expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void convert_A$Class$byteArray_T$UnsupportedEncodingException() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Class<?> clazz = null;
//		byte[] b = new byte[] {};
//		try {
//			Bytes.convert(clazz, b);
//			fail("Expected exception was not thrown!");
//		} catch (UnsupportedEncodingException e) {
//		}
//	}
//
//	@Test
//	public void convert_A$Class$Object() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Class<?> clazz = null;
//		Object obj = null;
//		byte[] actual = Bytes.convert(clazz, obj);
//		byte[] expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}

	@Test
	public void ints() throws Exception {
		int expected, actual;
		byte[] b;

		expected = 0;
		b = Bytes.intToBytes(expected);
		actual = Bytes.bytesToInt(b);
		assertThat(actual, is(equalTo(expected)));

    expected = 61;
    b = Bytes.intToBytes(expected);
    actual = Bytes.bytesToInt(b);
    assertThat(actual, is(equalTo(expected)));

    expected = Integer.MIN_VALUE;
    b = Bytes.intToBytes(expected);
    actual = Bytes.bytesToInt(b);
    assertThat(actual, is(equalTo(expected)));

    expected = Integer.MAX_VALUE;
    b = Bytes.intToBytes(expected);
    actual = Bytes.bytesToInt(b);
    assertThat(actual, is(equalTo(expected)));
	}

  @Test
  public void longs() {
    long actual, expected;
    byte[] b;

    expected = Long.MIN_VALUE;
    b = Bytes.longToBytes(expected);
    actual = Bytes.bytesToLong(b);
    assertThat(actual, is(equalTo(expected)));

    expected = Long.MAX_VALUE;
    b = Bytes.longToBytes(expected);
    actual = Bytes.bytesToLong(b);
    assertThat(actual, is(equalTo(expected)));

    expected = 189L;
    b = Bytes.longToBytes(expected);
    actual = Bytes.bytesToLong(b);
    assertThat(actual, is(equalTo(expected)));
  }

   @Test
    public void doubles() {
      double actual, expected;
      byte[] b;

      expected = Double.MIN_VALUE;
      b = Bytes.doubleToBytes(expected);
      actual = Bytes.bytesToDouble(b);
      assertThat(actual, is(equalTo(expected)));

      expected = Double.MAX_VALUE;
      b = Bytes.doubleToBytes(expected);
      actual = Bytes.bytesToDouble(b);
      assertThat(actual, is(equalTo(expected)));

      expected = 189L;
      b = Bytes.doubleToBytes(expected);
      actual = Bytes.bytesToDouble(b);
      assertThat(actual, is(equalTo(expected)));
    }

   @Test
   public void strings() {
     String actual, expected;
     byte[] b;

     expected = "a string";
     b = Bytes.strToBytes(expected);
     actual = Bytes.bytesToStr(b);
     assertThat(actual, is(equalTo(expected)));
   }


//	@Test
//	public void longToBytes_A$long() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		long l = 0L;
//		byte[] actual = Bytes.longToBytes(l);
//		byte[] expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void bytesToLong_A$byteArray() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		byte[] b = new byte[] {};
//		long actual = Bytes.bytesToLong(b);
//		long expected = 0L;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void doubleToBytes_A$double() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		double d = 0.0;
//		byte[] actual = Bytes.doubleToBytes(d);
//		byte[] expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void bytesToDouble_A$byteArray() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		byte[] b = new byte[] {};
//		double actual = Bytes.bytesToDouble(b);
//		double expected = 0.0;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void strToBytes_A$String() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		String str = null;
//		byte[] actual = Bytes.strToBytes(str);
//		byte[] expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void bytesToStr_A$byteArray() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		byte[] b = new byte[] {};
//		String actual = Bytes.bytesToStr(b);
//		String expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void serialize_A$Object() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		Object obj = null;
//		byte[] actual = Bytes.serialize(obj);
//		byte[] expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}
//
//	@Test
//	public void deserialize_A$byteArray() throws Exception {
//		// TODO auto-generated by JUnit Helper.
//		byte[] serial = new byte[] {};
//		Object actual = Bytes.deserialize(serial);
//		Object expected = null;
//		assertThat(actual, is(equalTo(expected)));
//	}

}
